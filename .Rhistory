}
for (i in 1:10){
s=s+(1.0/2^i)
}
s=0
for (i in 1:10){
s=s+(1.0/2^i)
}
for (i in 1:100){
s=s+(1.0/2^i)
}
for (i in 1:1000){
s=s+(1.0/2^i)
}
for (i in 1:10000){
s=s+(1.0/2^i)
}
s=0.0
a=1.0
for (i in 1:10000){
s=s*(1+1.0/2^i)
}
s=1
for (i in 1:10000){
s=s*(1+1.0/2^i)
}
for (i in 1:100000){
s=s*(1+1.0/2^i)
}
s=1
for (i in 1:100000000){
s=s*(1+1.0/2^i)
}
for (i in 1:10){
s=s*(1+1.0/2^i)
}
s=1
for (i in 1:10){
s=s*(1+1.0/2^i)
}
s=1
for (i in 1:10){
s=s*(1+1.0/2^i)
}
s=1
for (i in 1:10){
s=s*(1+1.0/2^i)
}
# Section I: Problem 1.2
![Caption for the picture.](C:\Users\HanshiRo\Desktop\Columbia\GR5221\HW1/1.jpg)
curve(dbeta(x,shape1 = 0.5,shape2 = 0.5))
curve(dexp(x,rate = 0.5))
curve(dexp(x,rate = -0.5))
curve(dexp(x,rate = 0.5))
curve(dbeta(x,shape1 = 0.5,shape2 = 1))
pbeta(1,shape1 = 0.5,shape2 = 1)
pbeta(0.9,shape1 = 0.5,shape2 = 1)
pbeta(0.2,shape1 = 0.5,shape2 = 1)
dbeta(0.2,shape1 = 0.5,shape2 = 1)
dbeta(0.1,shape1 = 0.5,shape2 = 1)
dbeta(0.01,shape1 = 0.5,shape2 = 1)
dbeta(1,shape1 = 0.5,shape2 = 1)
dbeta(0.8,shape1 = 0.5,shape2 = 1)
dbeta(1,shape1 = 0.5,shape2 = 1)
dbeta(1,shape1 = 0.5,shape2 = 2)
curve(dbeta(x,shape1 = 0.5,shape2 = 2))
install.packages("slutch3")
install.packages("Sleuth3")
library(Sleuth3)
humerus
parentheses
Sleuth3::humerus
Sleuth3::case0202
Sleuth3::ex0505
ex0505
library(Sleuth3)
ex0221
Sleuth3::ex0333
c(1,2,3)*c(1,2,3)
r<-c(rnorm(10),rnorm(10),rnorm(10),rnorm(10))
fact<-gl(4,10)
x<-tapply(r,fact,range,simplify = TRUE)
a<-matrix(1,2;3,4)
a<-matrix(c(1,2,3,4),2,2)
names(a)
row.names(a)
colnames(a)
names(a)<-"a"
names(a)
x<-c(2,3,4,5)
x[-1]
x[c(-1,0)]
x[c(-1,0,0,0)]
x[c(-1,2,3,4)]
x<-as.Date("2019-10-01")
month(x)
months(x)
attr(x)
x<-c(1L,2L,3L,4L,5L)
median(x)
a<-median(x)
class(a)
indat<-c("A","B","C")
grep("Rd",indat)
grep(["Rd","Ave"],indat)
grep(["Rd"],["Ave"],indat)
m<-list(5:9,"R",c(TRUE,FALSE))
as.data.frame(m)
as.data.frame(I(m))
install.packages("Sleuth3")
library(Sleuth3)
data1<-ex0623
data1<-ex0623
View(data1)
library(MASS)
boxcox(data1)
boxcox(data1$WtLoss24)
x<-data1
x<-data1$WtLoss24
boxcox(x)
model<-lm(WtLoss24~Group)
model<-lm(WtLoss24~Group,data1)
boxcox(model)
data<-ex0333
View(data)
boxcox(data$BrainSize~data$LitterSize)
data<-ex0221
View(data)
boxcox(data$Humerus~data$Status)
data<-ex0333
boxcox(data$BrainSize~data$LitterSize)
data<-ex0333
boxcox(data$BrainSize~data$LitterSize)
bs<-log(data$BrainSize)
qqplot(bs)
shapiro.test(bs)
data<-ex0221
boxcoc(data$Humerus~data$Status)
boxcox(data$Humerus~data$Status)
h<-data$Humerus
shapiro.test(h)
data<-ex0333
boxcox(data$BrainSize~data$LitterSize)
bs<-log(data$BrainSize)
shapiro.test(bs)
small<-data2%>%filter(LitterSize=="Small")
large<-data2%>%filter(LitterSize=="Large")
small<-small$BrainSize
large<-large$BrainSize
t.test(small,large,var.equal = TRUE)
data2<-ex0333
boxcox(data$BrainSize~data$LitterSize)
bs<-log(data$BrainSize)
shapiro.test(bs)
small<-data2%>%filter(LitterSize=="Small")
large<-data2%>%filter(LitterSize=="Large")
small<-small$BrainSize
large<-large$BrainSize
t.test(small,large,var.equal = TRUE)
View(data2)
library(tidyverse)
data2<-ex0333
boxcox(data$BrainSize~data$LitterSize)
bs<-log(data$BrainSize)
shapiro.test(bs)
small<-data2%>%filter(LitterSize=="Small")
large<-data2%>%filter(LitterSize=="Large")
small<-small$BrainSize
large<-large$BrainSize
t.test(small,large,var.equal = TRUE)
data2%>%mutate(BrainSize=log(BrainSize))
data2<-data2%>%mutate(BrainSize=log(BrainSize))
small<-data2%>%filter(LitterSize=="Small")
large<-data2%>%filter(LitterSize=="Large")
small<-small$BrainSize
large<-large$BrainSize
t.test(small,large,var.equal = TRUE)
boxcox(data2$BrainSize~data$LitterSize)
boxcox(data2$BrainSize~data2$LitterSize)
data2<-ex0333
View(data2)
data2<-data2%>%mutate(BrainSize=log(BrainSize))
View(data2)
small<-data2%>%filter(LitterSize=="Small")
large<-data2%>%filter(LitterSize=="Large")
small<-small$BrainSize
large<-large$BrainSize
t.test(small,large,var.equal = TRUE)
exp(-0.79604609)
exp(0.00210957)
1/exp(-0.79604609)
1/exp(0.00210957)
data3<-ex0431
data3<-ex0431
View(data3)
control<-data3%>%filter(Group=="Control")
therapy<-data3%>%filter(Group=="Therapy")
boxcox(data3$Survival~data3$Group)
data3$Survival
s<-data3$Survival
plot(1:length(s),s)
data3<-data3%>%mutate(Survival=log(Survival))
control<-data3%>%filter(Group=="Control")
therapy<-data3%>%filter(Group=="Therapy")
control<-control$Survival
therapy<-therapy$Survival
t.test(control,therapy,vvar.equal = F)
t.test(control,therapy,vvar.equal = T)
wilcox.test(control, therapy, conf.int = TRUE)
wilcox.test(control, therapy)
wilcox.test(control, control)
data4<-ex0525
data4<-ex0525
View(data4)
boxcox(data4$Income2005~data4$Educ)
data4<-data4%>%mutate(Income2005=log(Income2005))
boxcox(data4$Income2005~data4$Educ)
group1<-data4%>%filter(Educ=="<12")
group2<-data4%>%filter(Educ=="12")
group3<-data4%>%filter(Educ=="13-15")
group4<-data4%>%filter(Educ=="16")
group5<-data4%>%filter(Educ==">16")
group1<-group1$Income2005
group2<-group2$Income2005
group3<-group3$Income2005
group4<-group4$Income2005
group5<-group5$Income2005
model<-aov(Income2005~Educ,data = data4)
summary(model)
boxplot(group1,group2,group3,group4,group5)
boxcox(data4$Income2005~data4$Educ)
data4<-ex0525
boxcox(data4$Income2005~data4$Educ)
a<-boxcox(data4$Income2005~data4$Educ)
View(a)
which(a$y==max(a$y))
x[which(a$y==max(a$y))]
a$x[which(a$y==max(a$y))]
model0<-lm(Income2005~0+Educ,data = data4)
model1<-lm(Income2005~1+Educ,data = data4)
anova(model0,model1)
View(data4)
data4<-ex0525
a<-boxcox(data4$Income2005~data4$Educ)
data4<-data4%>%mutate(Income2005=log(Income2005))
a<-boxcox(data4$Income2005~data4$Educ)
model0<-lm(Income2005~0+Educ,data = data4)
model1<-lm(Income2005~1+Educ,data = data4)
anova(model0,model1)
model1<-lm(Income2005~1,data = data4)
anova(model0,model1)
model<-aov(Income2005~Educ,data = data4)
summary(model)
model0<-lm(Income2005~0+Educ,data = data4)
summary(model0)
model1<-lm(Income2005~1,data = data4)
summary(model1)
summary(model0)
source('~/.active-rstudio-document', echo=TRUE)
predict(model0,newdata = new.x,interval = "confidence")
new.x<-c(1,0,0,0,0)
predict(model0,newdata = new.x,interval = "confidence")
View(model0)
new.x<-c(Educ<12=1,Educ12=0,Educ13-15=0,Educ16=0,Educ>16=0)
new.x<-c(Educ<12=1,Educ12=0,Educ13-15=0,Educ16=0,Educ>16=0)
new.x<-c("Educ<12=1,Educ12=0,Educ13-15=0,Educ16=0,Educ>16"=0)
new.x<-c("Educ<12=1,Educ12=0,Educ13-15=0,Educ16"=0,"Educ>16"=0)
new.x<-c("Educ<12"=1,"Educ12"=0,"Educ13"-15=0,"Educ16"=0,"Educ>16"=0)
new.x<-c("Educ<12"=1,"Educ12"=0,"Educ13"-15=0,"Educ16"=0,"Educ>16"=0)
new.x<-c("Educ<12"=1,"Educ12"=0,"Educ13-15"=0,"Educ16"=0,"Educ>16"=0)
predict(model0,newdata = new.x,interval = "confidence")
datanew<-data4%>%mutate(x1=if(Educ=="<12"))
View(data4)
datanew<-data4%>%mutate(x1=if(Educ=="<12"))
datanew<-data4%>%mutate(x1=1)
datanew<-data4%>%mutate(x1=ifelse(Educ=="<12",1,0))
View(datanew)
datanew<-data4%>%mutate(x1=ifelse(Educ=="<12",1,0),
x2=ifelse(Educ=="12",1,0),
x3=ifelse(Educ=="13-15",1,0),
x4=ifelse(Educ=="16",1,0),
x5=ifelse(Educ==">16",1,0),
)
View(datanew)
datanew<-data4%>%mutate(x1=ifelse(Educ=="<12",1,0),
x2=ifelse(Educ=="12",1,0),
x3=ifelse(Educ=="13-15",1,0),
x4=ifelse(Educ=="16",1,0),
x5=ifelse(Educ==">16",1,0),
)%>%select(-Educ,-Subject)
View(data4)
datanew<-data4%>%mutate(x1=ifelse(Educ=="<12",1,0),
x2=ifelse(Educ=="12",1,0),
x3=ifelse(Educ=="13-15",1,0),
x4=ifelse(Educ=="16",1,0),
x5=ifelse(Educ==">16",1,0),
)%>%select(-Educ,-Subject)
View(datanew)
m0<-lm(Income~0+x1+x2+x3+x4+x5,datanew)
View(datanew)
m0<-lm(Income2005~0+x1+x2+x3+x4+x5,datanew)
View(m0)
View(model0)
new.x<-c(1,0,0,0,0)
predict(m0,newdata = new.x,interval = "confidence")
predict(m0,newdata = new.x,interval = "confidence")
new.x<-c(1,0,0,0,0)
predict(m0,newdata = new.x,interval = "confidence")
new.x<-data.frame(c(1,0,0,0,0))
new.x<-data.frame(x1=c(1))
new.x<-data.frame(x1=c(1),x2=c(0),x3=c(0),x4=c(0),x5=c(0))
predict(m0,newdata = new.x,interval = "confidence")
new.x<-data.frame(x1=c(1),x2=c(-1),x3=c(0),x4=c(0),x5=c(0))
predict(m0,newdata = new.x,interval = "confidence")
qt(0.975)
qt(0.975)
m0$coefficients
predict(m0,newdata = new.x,interval = "confidence")
exp(predict(m0,newdata = new.x,interval = "confidence"))
predict(m0,newdata = new.x,interval = "confidence")
new.x<-data.frame(x1=c(-1),x2=c(1),x3=c(0),x4=c(0),x5=c(0))
predict(m0,newdata = new.x,interval = "confidence")
exp(predict(m0,newdata = new.x,interval = "confidence"))
library(readr)
data1<-read.csv("HW3Problem1.csv")
library(readr)
data1<-read.csv("HW3Problem1.csv")
library(MASS)
UScrime
data<-UScrime
View(data)
x<-rep(0,818)
y<-rep(0,818)
y[1:637]<-0
y
y<-rep(0,818)
y[1:637]<-1
y
x[638:713]<-1
x<-rep(0,818)
y<-rep(0,818)
y[1:637]<-1
x[1:335]<-1
x[638:713]<-1
lm(y~x)
model<-lm(y~x)
summary(model)
confint(model)
pnorm(0)
pnorm(1)
pnorm(1.96)
pnorm(-0.349)
qchisq(22.4219,df=1)
qchisq(20.4219,df=1)
qchisq(10.4219,df=1)
qchisq(10,df=1)
pchisq(10,df=1)
pchisq(22,df=1)
a <- pi/2020
cos(2)
cos(1/2)
cos(1/2*pi)
cos(pi)
cos(pi/2)
cos(pi/4)
cos(pi/6)
cos(pi/3)
x <- 1:2019
x <- (1:2019)*a
a <- pi/2020
x <- (1:2019)*a
y <- 1+2*cos(x)
deduce(y,*)
deduce(y,`*`)
library(tidyverse)
deduce(y,`*`)
reduce(y,`*`)
aa <- data.frame(y)
View(aa)
View(aa)
rev(y)
c <- rev(y)
reduce(c,`*`)
q <- 1:1009
w <- 2019:1011
aaa <- 1+4*cos(q*x)*cos(w*x)
aaa <- 1+4*cos(q*a)*cos(w*a)
dvs <- data.frame(aaa)
View(dvs)
1+4*cos(a)*cos(2018*a)
(1+2*cos(a))*(1+2*cos(2019*a))
niter = 1e5 # number of iterations
below = rep(0, niter) # set up storage
set.seed(2009)
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253,
sd = 0.23/sqrt(253)) # generate random numbers
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over next 45 days
below[i] = as.numeric(minlogP < log(950000))
}
mean(below)
T=100
x = 0:T
y=c(0, cumsum(rnorm(T)))
plot(x,y, lty=1, type=”l”, xlab=””, ylab=””)
rnorm(T)
rnorm(T)
rnorm(T)
a <- rnorm(T)
cumsum(a)
1 | 2
1<3 | 2
1<3 | 2>6
a <- 1:3
a[2]
a[-1]
a[3]
niter = 1e5 # number of iterations
below = rep(0, niter) # set up storage
up = rep(0, niter) # set up storage
loss = rep(0, niter) # set up storage
set.seed(2020)
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253,
sd = 0.23/sqrt(253)) # generate random numbers
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over next 45 days
below[i] = as.numeric(minlogP < log(950000))
up[i] = as.numeric(maxlogP > log(1100000))
loss[i] = as.numeric(minlogP < log(950000) | logPrice[45] < log(1000000))
}
mean(below)
mean(up)
mean(loss)
niter = 1e5 # number of iterations
below = rep(0, niter) # set up storage
up = rep(0, niter) # set up storage
loss = rep(0, niter) # set up storage
set.seed(2020)
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253,
sd = 0.23/sqrt(253)) # generate random numbers
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over next 45 days
maxlogP = min(logPrice) # maximum price over next 45 days
below[i] = as.numeric(minlogP < log(950000))
up[i] = as.numeric(maxlogP > log(1100000))
loss[i] = as.numeric(minlogP < log(950000) | logPrice[45] < log(1000000))
}
mean(below)
mean(up)
mean(loss)
niter = 1e5 # number of iterations
below = rep(0, niter) # set up storage
up = rep(0, niter) # set up storage
loss = rep(0, niter) # set up storage
set.seed(2020)
for (i in 1:niter)
{
r = rnorm(45, mean = 0.05/253,
sd = 0.23/sqrt(253)) # generate random numbers
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice) # minimum price over next 45 days
maxlogP = max(logPrice) # maximum price over next 45 days
below[i] = as.numeric(minlogP < log(950000))
up[i] = as.numeric(maxlogP > log(1100000))
loss[i] = as.numeric(minlogP < log(950000) | logPrice[45] < log(1000000))
}
mean(below)
mean(up)
mean(loss)
cat(mean(below))
cat(1,mean(below))
cat("ss",mean(below))
cat("Problem 4, below possibility =",mean(below))
cat("Problem 4, profit possibility =",mean(below))
log(e)
log(1)
log(2.71)
log(1.05)/0.1
a <- log(1.05)/0.1
qnorm(a)
pnorm(a)
log(98/95)
pnorm((2-0.24)/sqrt(1.88))
qnorm(0.9)
pnorm(1.28)
log(1.2)
(log(1.2)-0.3)/sqrt(0.12)
pnorm((log(1.2)-0.3)/sqrt(0.12)
)
pnorm((log(1.2)-0.3)/sqrt(0.12))
t <- 1
pnorm(-sqrt(t)/2)
t <- 1:10
pnorm(-sqrt(t)/2)
load("~/GitHub/Fall2020-Project1-zc2485/output/data_use.RData")
View(anes_use)
load("~/GitHub/Fall2020-Project1-zc2485/output/data_use.RData")
View(anes_use)
install.packages("haven")
library(haven)
setwd("~/GitHub/Fall2020-Project1-zc2485")
read_csv("../data/anes_timeseries_cdf.sav")
read_sav("../data/anes_timeseries_cdf.sav")
read_sav("data/anes_timeseries_cdf.sav")
a <- read_sav("data/anes_timeseries_cdf.sav")
a <- read_sav("data/anes_timeseries_cdf.sav")
